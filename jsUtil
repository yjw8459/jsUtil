
//년도만 선택
function fn_datepickerYYYY(selector){
	$(selector).datepicker({
	    format: "yyyy",
	    viewMode: "years", 
	    minViewMode: "years"
	});
}



/**
 * 데이터 VO
 * 
 */

let dataUtil = {
	masterData : null,
	detailData : null,
	get getMasterData() { return dataUtil.masterData[$('#masterGrid tbody .table-info').index()]; },
	get getDetailData() { return dataUtil.detailData[$('#detailGrid tbody .table-info').index()]; },
	set insertMasterData(v) { 
		if( this.masterData === null ) this.masterData = v;
		else						   this.masterData.push(v);
	}
};


/**
 * 공통 선택자
 */
const MASTER_TR = '#masterGrid tbody tr';


/**
 * ajax 공통 
 */

/**
 * JSON 문자열 전송 
 * @param url
 * @param data
 * @param callback
 * @param _async
 * @returns
 */
function fn_ajaxStringify(url, data, callback, type, _async){
	if ( _async === undefined ) _async = true;
	$.ajax({
	    type: type
	   ,url: url
	   ,data: JSON.stringify(data)
	   ,async : _async
	   ,contentType : 'application/json'
	   ,beforeSend:function(){ $('.preloader').show(); }
	   ,complete:function(){ $('.preloader').fadeOut(); }
	   ,success: callback
	   ,dataType:"json"
	   ,error : function(x, e) { fn_ajaxError(x, e); }
	});
}

function fn_commonAjax(url, data, callback, type, _async){
	if ( _async === undefined ) _async = true;
	$.ajax({
	    type: type
	   ,url: url
	   ,data: $.param(data)
	   ,async : _async
	   ,beforeSend:function(){ $('.preloader').show(); }
	   ,complete:function(){ $('.preloader').fadeOut(); }
	   ,success: callback
	   ,dataType:"json"
	   ,error : function(x, e) { fn_ajaxError(x, e); }
	});
	
	
}





/**
 * 문자열 
 */

/**
 * 
 * @returns
 */
function fn_getOneWeekAfterDate(){
	let now = new Date();
	now.setDate(now.getDate() + 7);
	let afterDate = fn_commonDateRangePickerFormat(new Date(now));	// 일주일 뒤
	return afterDate;
}

function fn_setOneWeekAfterDate(selector){
	$(selector).val(fn_getOneWeekAfterDate());
}


function fn_commonUnCheckedByName(name){
	$('input[name=' + name + ']').each(function(){
		$(this).attr('checked', false);
	});
}



/**
 * 
 * 
 * 날짜 관련 함수
 * 
 *  
 */

/**
 * datepicker
 * 데이트피커
 */

/**
 * 현재 클래스 명을 받아서 datepicker를 입힌 후 클래스 이름 바꿈
 * @param targetClass
 * @param makeClass
 * @returns
 */
function fn_useDatepicker(targetClass, makeClass){
	$('.' + targetClass).daterangepicker({
		singleDatePicker: true,
		showDropdowns: true,
		locale:	{
			format:	'YYYY/MM/DD'
		}
	});
	$('.' + targetClass).each(function(){
		$(this).removeClass(targetClass);
		$(this).addClass(makeClass);
	});
}


/**
 * date 객체를 문자열 년월일로 구분자 섞어서 Return 
 * @param date
 * @returns
 */
function fn_commonDateRangePickerFormat(date, separator){
	if ( separator === undefined ) 	separator = '/';
	let year = date.getFullYear();
	let month = (1 + date.getMonth());
	let day = date.getDate();
	
	month = month >= 10 ? month : '0' + month;
	day = day >= 10 ? day : '0' + day;
	
	return year + separator + month + separator + day;
}



/**
 * dateString 날짜포맷
 */

/**
 * 문자열 형식의 8자리 년월일 문자열 사이를 구분하여 Return  
 * @param date(문자열)
 * @param separator
 * @returns
 */
function fn_commonDateFormat(date, separator){
	if ( separator === undefined ) 	separator = '/';
	if ( date === undefined || date === '' || date === null ) 
		return '';
	return date.substring(0,4) + separator 
	+ date.substring(4,6) + separator + 
	date.substring(6,8); 
}


/**
 * date 객체를 문자열 년월일로 구분자 섞어서 Return 
 * @param date(new Date())
 * @returns
 */
function fn_commonDateRangePickerFormat(date, separator){
	if ( separator === undefined ) 	separator = '/';
	let year = date.getFullYear();
	let month = (1 + date.getMonth());
	let day = date.getDate();
	
	month = month >= 10 ? month : '0' + month;
	day = day >= 10 ? day : '0' + day;
	
	return year + separator + month + separator + day;
}



/**
 * date mask (날짜 마스크)
 */

/**
 * 년/월/일 마스크
 * @param className
 * @param separator
 * @returns
 */
function fn_initializeYearMonthDay(className, separator){
	$('.' + className).mask('0000' + separator + '00' + separator + '00');
}

/**
 * 시/분 마스크
 * @param className
 * @param separator
 * @returns
 */

function fn_initializeTime(className, separator){
	$('.' + className).mask('00' + separator + '00');
}

/**
 * 시분 구분자 포맷
 */
function fn_initialize_mmss(value, separator){
	return value.substring(0, 2) + separator + value.substring(2, 4);
}


/**
 * Date Check
 * 시간체크
 */

/**
 * 30분 1시간 단위인지 구분 작성자 : 유종원
 * 
 * @param value
 * @param separator
 * @returns
 */
function fn_checkMinute(value, separator){
	if ( typeof value == 'undefined' )	return true; 
	let hour = value.split(separator)[0];
	let minute = value.split(separator)[1];
	if ( minute === '30' || minute === '00' ) {
		return false;
	}
	return true;
}


/**
 * Validator 
 * 벨리데이터
 * 벨리데이션
 */

/**
 * value 값의 Element 체크 
 * @param name
 * @param type
 * @param value
 * @returns
 */
function fn_commonCheck(name, type, value){
	$('input[name=' + name + '][type=' + type + ']').each(function(){
		if ( $(this).val() === value ) {
			$(this).prop('checked', true);
			return false;
		}
		else	$(this).prop('checked', false);
	});
}


/**
 * 비어있는 경우 true Return
 * 
 * @param selector
 * @returns
 */
function fn_isEmpty(selector){
	// 공백여부 체크
	let valueCheck = true; 		// 벨리데이션 예외 체크
	let processCheck = false;
	$(selector).find('.required').each(function(){
		valueCheck = fn_ElementsValidator($(this));
		if ( ! valueCheck ){
			processCheck = true;
			return false;
		}
	});
	if ( ! valueCheck ) { // 필수 입력 값이 비어있을 경우 break
		processCheck = true;
	}
	return processCheck;
}


/**
 * 
 * 객체가 비어있을 경우 Return true
 * 
 * @param obj
 * @returns
 */
function fn_objValidator(obj){
	let result = false;
	if ( obj === null ) 	return true;
	for (const property in obj) {
		let value = obj[property];
		if ( value === '' || value === undefined )	result = true; 
	}
	return result;
}

/**
 * 객체가 비어있을 경우 return new Object(); 
 * @param data
 * @returns
 */
function fn_objCheck(data){
	if ( data === null || data === undefined ) return {};
	return data;
}

/**
 * 클래스 네임을 가진 타겟 중 값이 비어있는지 체크 
 * @param targetClass
 * @returns
 */
function fn_inEmptyTarget(targetClass){
	let result = true;
	$('.' + targetClass).each(function(){
		if ( $(this).val() === '' || $(this).val() === undefined ){
			result = false;
			return false;
		} 
	});
	return result;
}



/**
 * 객체 관련 함수
 * 
 */


/**
 * JSON stringify, parse를 이용한 객체복사
 */
function fn_jsonDeepCopy(obj){
	return JSON.parse(JSON.stringify(obj));
}


/**
 * 객체 깊은 복사 for in
 * $.extend 사용 안될 시 
 * @param data
 * @returns
 */
function fn_copyObject(data){
	let result = {};
	for ( let property in data) result[property] = data[property];
	return result;
}


function fn_appendFormData(formData, appendData){
	for ( let property in appendData ) formData.append(property, appendData[property]);
	return formData;
}


/**
 * 객체 병합 합수 
 * 첫 번째 인자에 두번 째 인자 데이터 병합 
 * @returns
 */
function fn_mergeObject(result, data){
	for ( let property in data) {
		result[property] = data[property];
	}
	return result;
}



/**
 * form선택자와 merge할 데이터를 받아서 formData로 병합
 * 
 * @param formSelector
 * @param obj
 * @returns
 */
function fn_commonFileFormData(formSelector, obj){
	let form = $(formSelector)[0];
	let data = new FormData(form);
	
	for ( let property in obj) 	data.append(property, obj[property]);
	return data;
}







/**
 * Element Control
 * 요소 제어 
 */



/**
 * 선택자를 받아서 값 세팅 공통 함수
 * @param selector
 * @param value
 * @returns
 */
function fn_setElementValue(selector, value){
	let $selector = $(selector);
	let tagName = $selector.prop('tagName');	// 태그이름은 prop
	if ( 'INPUT' === tagName ) {
		let type = $selector.attr('type');
		if ( 'text' === type || 'hidden' === type) {
			$selector.val(value);
		}
		else if ( 'radio' === type ) {
			$(selector).each(function(){
				if ( $(this).val() === value ) {
					$(this).prop('checked', true);
					return false;
				}
			});
		}
	}
	else if ( 'TEXTAREA' === tagName ) {
		$selector.val(value);
	}
	else if ( 'SELECT' === tagName ) {
		$selector.val(value).attr('selected', true);
	}
	return ;
}

/**
 * 태그 정보로 요소 생성 및 반환
 * @param tagName
 * @param type
 * @param value
 * @param name
 * @returns
 */
function fn_createElement(tagName, type, value, name){
	let element = document.createElement(tagName);
	element.type = type;
	element.value = value;
	element.name = name;
	return element;
}


/**
 * 태그 위에 Form으로 감싸서 serializeObject 작성자 : 유종원
 * 
 * @param $parent
 * @returns
 */
function fn_wrappingFormData($parent){
	let $form = $('<form></form>');
	$form.append($parent);
	let data = $form.serializeObject();
	return data;
}


/**
 * 체크되어 있는지
 */
function fn_isChecked(selector){
	let result = false;
	$(selector).each(function(){
		if ( $(this).is(':checked') ) {
			result = true;
			return false;
		}
	})
	return result;
}


/**
 * 체크박스 리스트를 받아서 체크된 값의 리스트 반환
 * 
 * @returns
 */
function fn_isChecked_returnArray($checkList){
	let values = new Array();
	$checkList.each(function(){
		let isChecked = $(this).prop('checked');
		if ( isChecked ) 	values.push( $(this).val() );
	});
	return values;
}

/**
 * disabled 유무
 * 
 * @param selector
 * @param state
 * @returns
 */
function fn_common_initDisabled(selector, state){
	$(selector + ' button').attr('disabled', state);
	$(selector + ' input').attr('disabled', state);
	$(selector + ' textarea').attr('disabled', state);
	$(selector + ' select').attr('disabled', state);
}

/**
 * 무조건 Disabled 항목 잠구기 함수
 * 
 * @param selector
 * @returns
 */
function fn_common_initDisabled_v2(selector){
	$(selector + ' .disabledEl').attr('disabled', true);	
}


/**
 * display none은 클래스로 제어가 안되기 때문에,
 * ID값을 받아서 반복문 display none
 * 
 * 보여울 테이블도 인자 전달 받아서 스위치 기능을 한다.
 * switch
 * @param className
 * @param showTable
 * @returns
 */
function fn_switchElement(className, showTable){
	let targetIdArray = fn_getIdListByClassName(className);
	for (let i= 0;  i< targetIdArray.length;  i++) {
		$('#' + targetIdArray[i]).css('display', 'none');
	}
	$('#' + showTable).css('display', '');
}

/**
 * 클래스 이름을 받아서 클래스들의 Id값 array return
 * @param className
 * @returns
 */
function fn_getIdListByClassName(className){
	let array = new Array();
	$('.' + className).each(function(){
		array.push($(this).attr('id'));
	});
	return array;
}



/**
 * 체크박스 전체선택제어 
 */
function fn_checkBoxAllSelector(selector, target){
	let checked = $(selector).is(':checked');
	$(target).prop('checked', checked);
}

/**
 * 파일 업로드 시 인풋에 파일 이름 삽입
 */
function fn_setInputFileName(selector, _this){
	$(selector).val(_this.files[0].name);
}




/**
 * 모달 관련 함수 
 */

/**
 * 모달 오픈
 * @param id
 * @returns
 */

function fn_commonOpenModal(id){
	$('#' + id).modal('show');
}

function fn_commonCloseModal(id){
	$('#' + id).modal('hide');
}



/**
 * 이벤트 관련 함수
 */


/**
 * 클릭 이벤트
 */

/**
 * 테이블 로우 클릭 함수
 * @param tableName
 * @param callback
 * @returns
 */

function fn_commonTableClickEvent(tableName, callback){
	if ( callback === undefined  ) 	callback = null;
	return function(){
		$('#' + tableName + ' tbody tr').attr('class', '');
		$(this).attr('class', 'table-info');
		if ( callback === null ) 	return false;
		callback();
	}
}


/**
 * 이벤트 대상 선택자를 받아서 기본 클릭 이벤트 리턴
 * 클릭 시 table-info class를 남김
 * @param selector
 * @returns
 */
function fn_setClickEvent(selector, callback){
	$(selector).click(fn_createBasicClickEvent(selector, callback));
}

function fn_createBasicClickEvent(selector, callback){
	return function(){
		$(selector).removeClass('table-info');
		$(this).attr('class', 'table-info');
		if ( typeof callback != 'undefined' )	callback(); 
	};
}


/**
 * 더블클릭 이벤트
 */

/**
 * 더블클릭 공통 이벤트 
 * 클릭 공통 이벤트를 콜백으로 호출해서 사용
 * @param selector
 * @param callback
 * @returns
 */
function fn_setdblClickEvent(selector, callback){
	$(selector).dblclick(fn_createBasicClickEvent(selector, callback));
}

/**
 * onChange Event
 * 온체인지 이벤트
 */

/**
 * onChange 함수
 * 부모 클래스 아래의 tag를 배열로 받아서 변경 이벤트 추가
 * 변경 될 시 테이블 로우에 update 클래스를 남김
 * @param className
 * @param tagArr
 * @param callback
 * @returns
 */
function fn_setAddUpdateClass(className, tagArr, callback){
	for (var i = 0; i < tagArr.length; i++) {
		$(className + ' ' + tagArr[i]).change(fn_addUpdateClass(callback));
	}
}

function fn_addUpdateClass(callback){
	return function(){
		let $tr = $(this).closest('tr');
		$tr.addClass('update');
		if ( callback !== undefined ) 	callback();
	}
}

/**
 * 체크박스 감지 함수 
 * 체크박스 체크 시 테이블 로우에 checked 클래스를 남김
 * @returns
 */
function fn_setCheckEvent(selector){
	$(selector).change(fn_commonDetectingCheckBox);
}


function fn_commonDetectingCheckBox(){
	let isChecked = $(this).is(':checked');
	let $parent = $(this).closest('tr');
	if ( isChecked ) {
		$parent.removeClass('unchecked');
		$parent.addClass('checked');
	}
	else {
		$parent.removeClass('checked');
		$parent.addClass('unchecked');
	}
}



/**
 * 공통 콜백
 */

/**
 * 
 * @param division
 * @param callback
 * @returns
 */

function fn_getCallback(division, callback){
	let msg = '';
	if ( division === 'delete' ) 		msg = '삭제되었습니다.';
	else if ( division === 'insert' ) 	msg = '저장되었습니다.';
	else if ( division === 'confirm' ) 	msg = '신청되었습니다.';
	return function(data){
		let retCode = data.retCode;
		if ( retCode > 0 ) {
			alert(msg);
			if ( callback === undefined )	location.reload();
			else							callback();
		}
	};
}


/**
 * HTML 생성 함수
 */

/**
 * 빈 로우 생성
 * @param selector
 * @param repeat
 * @returns
 */
function fn_commonInsertRow(selector, repeat){
	let rowCnt = $(selector + ' tbody tr').length;
	let selectedCnt  = $(selector + ' .table-info').length;
	let idx = selectedCnt < 1 ? rowCnt : rowCnt + selectedCnt; 
	let html = '';
	html += '<tr class="insertRow">';
	html += '	<td>' + (idx++) + '</td>';
	for (var i = 0; i < repeat; i++) {
		html += '	<td></td>';
	}
	html += '	<input class="status" value="I">';
	html += '</tr>';
	selectedCnt < 1 ? $(selector + ' tbody').html(html) : $(selector + ' tbody').append(html);
}


/**
 * 로우 생성 Elements를 테이블 로우 안에 삽입
 * @param data
 * @returns
 */
function fn_commonInsertRow_V2(selector, htmlList){
	let rowCnt = $(selector + ' tbody tr').length;
	let html = '';
	html += '<tr class="insertRow">';
	for (var i = 0; i < htmlList.length; i++) {
		html += '<td>';
		html += 	htmlList[i];
		html += '</td>';
	}
	html += '</tr>';
	rowCnt < 1 ? $(selector + ' tbody').html(html) : $(selector + ' tbody').append(html);
}

function fn_commonInsertRow_V3(selector, htmlList){
	let rowCnt = $(selector + ' tbody tr').length;
	const selectedCnt = $(selector + ' .table-info').length;
	let html = '';
	html += '<tr class="insertRow">';
	for (var i = 0; i < htmlList.length; i++) {
		html += '<td>';
		html += 	htmlList[i];
		html += '</td>';
	}
	html += '</tr>';

	if ( selectedCnt == 0 ) rowCnt = 0;
	rowCnt < 1 ? $(selector + ' tbody').html(html) : $(selector + ' tbody').append(html);
	fn_toggleClass('#masterGrid_1', 'insertRow', 'table-info');
	
}

function fn_toggleClass(selector, target, className){
	$(selector + ' .' + className).removeClass(className);
	$(selector + ' .' + target).addClass(className);
}

function fn_commonInsertCallback(data){
	let retCode = data.retCode;
	if ( retCode > 0 ) {
		alert('저장되었습니다.');
		location.reload();
	}
}

/**
 * 새로고침 시 파라미터 전달 
 * @param url
 * @param param
 * @returns
 */
function fn_commonHoldReload(url, param){
	const count = Object.keys(param).length;
	let index = 1;
	return function(){
		url += '?';
		for ( let property in param) {
			url += property + '=' + param[property];
			if ( count !== index ) 	url += '&';
			index++;
		} 
		location.href = url;
	}
}


/**
 * 테이블 데이터 생성 Version2
 * 
 * @returns html
 */
function fn_makeTableRow_V2(data, properties){
	let html = '<tr>';
	properties.forEach(function(property){
		html += '<td>' + fn_basicValidator(data[property]) + '</td>';
	});
	html += '</tr>';
	return html;
}


/**
 * 데이터 없을 시 데이터 없음 로우 생성 함수 
 * @param colspan
 * @returns
 */
function fn_createEmptyTableHtml(colspan){
	let html = '';
	if ( colspan > 0 ) {
		html += '<tr>';
		html += '	<td colspan="' + colspan + '">No Data Been found.</td>';
		html += '</tr>';
	}
	return html;
}

/**
 * 데이터 없을 시 데이터 없음 테이블 로우 생성 및 html셋
 */
function fn_createEmptyTableRow(selector, colspan){
	let html = fn_createEmptyTableHtml(colspan);
	$(selector + ' tbody').html(html);
}


/**
 * selector와 html을 받아서 table tbody에 append
 * 
 * @param selector
 * @param html
 * @returns
 */
function fn_commonCreateTableRow(selector, html){
	$(selector + ' tbody').html(html);
}










/**
 * 공통 유틸 함수
 * @param selector
 * @returns
 */

/**
 * 선택자의 인덱스 반환
 * @param selector
 * @returns
 */
function fn_commonGetRowIndex(selector){
	return $(selector).index();
}


/**
 * Master Table 초기 상태 세팅 
 */
function fn_setMasterRowEvent(selector, html, rowIdx, callback){
	$(selector + ' tbody').html(html);
	fn_setClickEvent(selector + ' tbody tr', callback);
	$(selector + ' tbody tr').eq(rowIdx).click();
}


/**
 * 공통 코드 파서
 * @param code
 * @returns
 */

function fn_commonCodeParser(code){
	switch ( code ) {
	case 'A1': return '신청서';
	case 'A2': return '개인정보처리동의서';
	case 'A' : return '신청';
	case 'Y' : return '승인';
	case 'P' : return '승인';
	case 'N' : return '미신청';
	case 'R' : return '거절';
	case 'RR': return '반려';
	case 'RA': return '교원승인';
	default : return '';
	}
}


/**
 * 다운로드
 */

/**
 * 공통 모달 사용시(파일 다운로드 모달)
 */

/**
 * 공통 모달 사용시 공통 파일 다운로드 사용 시 파일 다운로드 함수 로우 안에 파일 이름, 파일 경로가 있을 시 사용 가능
 * 
 * @param _this
 * @returns
 */
function fn_commonDownload_v1(_this){
	let form = document.querySelector('#modal_downloadForm');
	form.action = '/cmmn/attachFileDownload';
	form.method = 'POST';
	
	let parent = _this.closest('tr');
	document.querySelector('#modal_fileName').value = parent.querySelector('.fileName').value;
	document.querySelector('#modal_filePath').value = parent.querySelector('.filePath').value;
	
	document.querySelector('#modal_downloadForm').submit();
}

/**
 * 공통 모달 사용시 공통 파일 다운로드 사용 시 파일 다운로드 함수 로우 안에 파일 이름, 파일 경로가 있을 시 사용 가능
 * 
 * @param _this
 * @returns
 */
function fn_commonDownload_v2(_this){
	let form = document.querySelector('#modal_downloadForm2');
	form.action = '/cmmn/attachFileDownload';
	form.method = 'POST';
	
	let parent = _this.closest('tr');
	document.querySelector('#download_fileName').value = parent.querySelector('.fileName').value;
	document.querySelector('#download_filePath').value = parent.querySelector('.filePath').value;
	
	document.querySelector('#modal_downloadForm2').submit();
}



/**
 * 공통 모달 사용하지 않을 시,
 * 파일 명과 파일 경로를 인자로 받아서 파일 다운로드 
 */
function fn_commonFileDownload(name, path){
	let form = document.createElement('form');
	let nameEl = fn_createElement('input', 'hidden', name, 'file_name');
	let pathEl = fn_createElement('input', 'hidden', path, 'file_path');
	document.body.appendChild(form);
	form.append(nameEl);
	form.append(pathEl);
	form.action = '/cmmn/attachFileDownload';
	form.method = 'POST';
	form.submit();
}

/**
 * 파일 업로드
 */


/**
 * 
 * 
 * 모달
 * 
 * 
 */

/**
 * 교원 검색 팝업
 * modal ID : SearchProfModal
 * @returns
 */
function fn_initProfessorData(selector) {
	if ( selector !== undefined ) dataUtil.professorSelector = selector;
	var isOpen = $('#searchProfModal').is(':visible');
	if(isOpen) {
		// 데이터 검색
		var emp_no = $('#modal_prof_no').val();
		var work_tp = $('#modal_work_tp').val();
		var emp_tp = $('#modal_emp_tp').val();
		
		$.ajax({
			url : '/cmmn/initFacultyData' 
		   ,type : 'post'
		   ,dataType : 'json'
		   ,data : {'emp_no' : emp_no, 'work_tp' : work_tp, 'emp_tp' : emp_tp}
		   ,async : false
		   ,beforeSend:function(){ $('.preloader').show(); }
		   ,complete:function(){  $('.preloader').fadeOut(); }
		   ,success : function(result) {
			   fn_initProfessorDataCallback(result);
		   }
		   ,error : function(x, e) { fn_ajaxError(x, e); }
		});
	} else {
		// 팝업 오픈
		$("#searchProfModal").modal('show');
		$('#modal_prof_no').focus();
	}
}



/**
 * 교원 검색 팝업 callback
 * @param result
 * @returns
 */
function fn_initProfessorDataCallback(result) {//포인트
	var html = '';
	if(result == null || result.length < 1) {
		alert("검색 결과가 없습니다.");
		html = '<tr><td colspan="6">No Data has been found.</td></tr>';
	} else {
		for(var i=0; i<result.length; i++) {
			var data = result[i];
			var count = i + 1;
			var empNo = data.empNo;
			var korName = data.korName;
			var engName = data.engName;
			var workTpName = data.workTpNm;
			var empTpName = data.empTpNm;
			html += '<tr>';
			html += 	'<td style="color:#ff0000">' + count + '</td>';
			html += 	'<td>' + empNo + '</td>';
			html += 	'<td>' + korName + '</td>';
			html += 	'<td>' + engName + '</td>'
			html += 	'<td>' + workTpName + '</td>';
			html += 	'<td>' + empTpName + '</td>';
			html += 	'<input type="hidden" class="profNo" value="' + empNo + '">';
			html += 	'<input type="hidden" class="profNm" value="' + engName + '">';
			html += '</tr>';
		}
	}
	$('#searchProfTable tbody').html('').html(html);
	$('#searchProfTable tbody tr').click(fn_createBasicClickEvent('#searchProfTable tbody tr'));
	$('#searchProfTable tbody tr').dblclick(fn_modalSelectedProfessor);
}

/**
 * 교원 선택 모달에서 교원 선택
 * @returns
 */
function fn_modalSelectedProfessor(){
	const selector = dataUtil.professorSelector;
	const _this  = $('#searchProfTable .table-info');
	$('#selectedProfessor').val($(_this).find('.profNo').val());
	$(selector).val($(_this).find('.profNm').val());
	$('#searchProfModal').modal('hide');
}

/*


<!-- 교원 조회 팝업 -->
<div id="SearchProfModal" class="modal" tabindex="-1" role="dialog" aria-labelledby="myModalLabel" aria-hidden="true" data-backdrop="static" data-keyboard="false">
	<div class="modal-dialog modal-xl modal-dialog-scrollable">
		<div class="modal-content">
			<div class="modal-header" style="display:inline-block">
				<div class="row">
					<div class="col-lg-12">
						<h4 class="modal-title" id="myModalLabel" style="float:left">교원 검색</h4>
						<button type="button" class="close" data-dismiss="modal" aria-hidden="true">×</button>
					</div>
				</div>	
				<hr>
					<div class="row m-t-10">
						<div class="col-lg-12">
							<div class="button-group" id="modal_query_div">
								<button type="button" class="btn waves-effect waves-light btn-primary" onclick="initProfessorData();">조회</button>
							</div>
						</div>
					</div>
				<hr />
				<div class="card">
					<div class="card-body">
						<div class="row">
				
				<!-- 히든 -->
				<input type="hidden" id="modal_idx">
				<!-- 히든 -->
				
							<div class="col-md-5">
								<label>사번(성명)</label>
								<div class="row col-lg-12" id="modal_prof_no_div">
									<input type="text" id="modal_prof_no" class="form-control" onkeypress="if(event.keyCode==13) { initProfessorData(); return false;}" />
								</div>
							</div>
				
							<div class="col-md-5">
								<label>재직구분</label>
								<div class="row col-lg-12">
									<select id="modal_work_tp" class="form-control custom-select">
					  					<option value="">- Select -</option>
<c:forEach items="${result.ge04 }" var="code">
	<c:if test="${code.code eq '3' || code.code eq '1' }">					
										<option value="${code.code }">${code.ename }</option>
	</c:if>									
</c:forEach>
									</select>
								</div>
							</div>
							
<%-- 							<div class="col-md-4">
								<label>교직원구분</label>
								<div class="row col-lg-12">
									<select id="modal_emp_tp" class="form-control custom-select">
						  				<option value="">- Select -</option>
				<c:forEach items="${result.ge03 }" var="code">
										<option value="${code.code }">${code.ename }</option>
				</c:forEach>
									</select>
								</div>
							</div> --%>
							
						</div>
					</div>
				</div>
			</div>
			<div class="modal-body">
				<p></p>
				<div class="card">
					<div class="card-body">						
						<div class="row">
							<div class="col-lg-12">
					  			<div class="table-responsive">
						  			<table id="searchProfTable" class="table table-bordered tbl-center table-modal table-hover table-striped">
						  				<thead>
						  					<tr>
							  					<th class="text-nowrap" style="width:55px">No.</th>
							  					<th class="text-nowrap" style="width:119px">사번</th>
							  					<th class="text-nowrap" style="width:127px">이름(한글)</th>
							  					<th class="text-nowrap" style="width:127px">이름(영어)</th>
							  					<th class="text-nowrap" style="width:127px">재직구분</th>
							  					<th class="text-nowrap" style="width:127px">부서명(한글)</th>
						  					</tr>
						  				</thead>
						  				<tbody>
						  					<tr><td colspan="6">No Data has been found.</td></tr>
						  				</tbody>
						  			</table>
					  			</div>
							</div>
						</div>
					</div>
				</div>
			</div>
			<div class="modal-footer">
				<button type="button" id="applyBtn" class="btn btn-danger waves-effect waves-light" onclick="">Confirm</button>
				<button type="button" class="btn btn-default waves-effect" data-dismiss="modal">Close</button>
			</div>
		</div>
	</div>
</div>



 */



